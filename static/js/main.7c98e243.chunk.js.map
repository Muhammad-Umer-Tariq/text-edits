{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","mode","children","_jsxs","href","title","type","id","htmlFor","onClick","toggleMode","style","color","TextForm","text","setText","useState","isListening","setIsListening","recognition","setRecognition","handleResult","event","interimTranscript","i","resultIndex","results","length","transcript","punctuationMap","period","comma","quote","colon","semicolon","dash","key","value","Object","entries","regex","RegExp","replace","prevText","showAlert","_Fragment","heading","onChange","target","backgroundColor","rows","disabled","handleUpClick","newText","toUpperCase","handleLoClick","toLowerCase","handleClearClick","handleCopy","navigator","clipboard","writeText","handleExtraSpaces","split","join","handleMicClick","stop","startListening","window","recognitionInstance","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","onstart","onspeechend","onresult","onerror","error","start","handleSpeak","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","handleStopSpeaking","cancel","filter","element","defaultProps","aboutText","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","Date","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"uNAKe,SAASA,EAAOC,GAC7B,OACEC,cAAA,OACEC,UAAW,yCAAyCF,EAAMG,WAAWH,EAAMG,OAAOC,SAElFC,eAAA,OAAKH,UAAU,kBAAiBE,SAAA,CAC9BH,cAAA,KAAGC,UAAU,eAAeI,KAAK,IAAGF,SACjCJ,EAAMO,QAKTN,cAAA,UACEC,UAAU,iBACVM,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAAmBJ,SAE9BH,cAAA,QAAMC,UAAU,0BAElBG,eAAA,OAAKH,UAAU,2BAA2BO,GAAG,yBAAwBL,SAAA,CACnEH,cAAA,MAAIC,UAAU,kCAAiCE,SAC7CH,cAAA,MAAIC,UAAU,WAAUE,SACtBH,cAAA,KAAGC,UAAU,WAAW,eAAa,OAAOI,KAAK,IAAGF,SAAC,aAazDC,eAAA,OAAKH,UAAU,4BAA2BE,SAAA,CACxCH,cAAA,OACEC,UAAW,gCACM,UAAfF,EAAMG,KAAmB,OAAS,SACjCC,SAQHH,cAAA,SACEC,UAAU,mBACVQ,QAAQ,6BAGZT,cAAA,UACEC,UAAU,yCACVS,QAASX,EAAMY,WAAWR,SAE1BH,cAAA,KACEC,UAAW,UACM,UAAfF,EAAMG,KAAmB,OAAS,cAEpCU,MAAO,CAAEC,MAAsB,UAAfd,EAAMG,KAAmB,QAAU,yBCnEpD,SAASY,EAASf,GAC/B,MAEOgB,EAAMC,GAAWC,mBAFJ,4BAGbC,EAAaC,GAAkBF,oBAAS,IACxCG,EAAaC,GAAkBJ,mBAAS,MAGzCK,EAAgBC,IACpB,IAAIC,EAAoB,GAGxB,IAAK,IAAIC,EAAIF,EAAMG,YAAaD,EAAIF,EAAMI,QAAQC,SAAUH,EAC1DD,GAAqBD,EAAMI,QAAQF,GAAG,GAAGI,WAI3C,MAAMC,EAAiB,CACrBC,OAAQ,IACRC,MAAO,IACP,mBAAoB,IACpB,gBAAiB,IACjBC,MAAO,IACP,aAAc,IACd,cAAe,IACfC,MAAO,IACPC,UAAW,IACXC,KAAM,IACN,mBAAoB,IACpB,oBAAqB,KAIvB,IAAK,MAAOC,EAAKC,KAAUC,OAAOC,QAAQV,GAAiB,CACzD,MAAMW,EAAQ,IAAIC,OAAO,MAAML,OAAU,MACzCb,EAAoBA,EAAkBmB,QAAQF,EAAOH,GAIvDtB,GAAS4B,GAAaA,EAAWpB,IACjCzB,EAAM8C,UAAU,0BAA2B,YAqG7C,OACEzC,eAAA0C,WAAA,CAAA3C,SAAA,CACEC,eAAA,OACEH,UAAU,YACVW,MAAO,CAAEC,MAAsB,SAAfd,EAAMG,KAAkB,QAAU,WAAYC,SAAA,CAE9DH,cAAA,MAAIC,UAAU,OAAME,SAAEJ,EAAMgD,UAC5B/C,cAAA,OAAKC,UAAU,OAAME,SACnBH,cAAA,YACEC,UAAU,mBACVqC,MAAOvB,EACPiC,SArCczB,IACtBP,EAAQO,EAAM0B,OAAOX,QAqCb1B,MAAO,CACLsC,gBAAgC,SAAfnD,EAAMG,KAAkB,UAAY,QACrDW,MAAsB,SAAfd,EAAMG,KAAkB,QAAU,WAE3CM,GAAG,QACH2C,KAAK,QAKT/C,eAAA,OAAKH,UAAU,WAAUE,SAAA,CACvBH,cAAA,UACEC,UAAU,kCACVM,KAAK,SACLC,GAAG,qBACH,iBAAe,WACf,gBAAc,QAAOL,SACtB,yBAGDC,eAAA,MAAIH,UAAU,gBAAgB,kBAAgB,qBAAoBE,SAAA,CAChEH,cAAA,MAAAG,SACEH,cAAA,UACEC,UAAU,gBACVmD,SAA0B,IAAhBrC,EAAKa,OACflB,QAjFQ2C,KACpB,IAAIC,EAAUvC,EAAKwC,cACnBvC,EAAQsC,GACRvD,EAAM8C,UAAU,0BAA2B,YA8ER1C,SACxB,2BAIHH,cAAA,MAAAG,SACEH,cAAA,UACEC,UAAU,gBACVmD,SAA0B,IAAhBrC,EAAKa,OACflB,QApFQ8C,KACpB,IAAIF,EAAUvC,EAAK0C,cACnBzC,EAAQsC,GACRvD,EAAM8C,UAAU,0BAA2B,YAiFR1C,SACxB,2BAIHH,cAAA,MAAAG,SACEH,cAAA,UACEC,UAAU,gBACVmD,SAA0B,IAAhBrC,EAAKa,OACflB,QAvFWgD,KAEvB1C,EADc,IAEdjB,EAAM8C,UAAU,gBAAiB,YAoFK1C,SAC3B,iBAIHH,cAAA,MAAAG,SACEH,cAAA,UACEC,UAAU,gBACVmD,SAA0B,IAAhBrC,EAAKa,OACflB,QAtFKiD,KACjBC,UAAUC,UAAUC,UAAU/C,GAC9BhB,EAAM8C,UAAU,uBAAwB,YAoFR1C,SACrB,gBAIHH,cAAA,MAAAG,SACEH,cAAA,UACEC,UAAU,gBACVmD,SAA0B,IAAhBrC,EAAKa,OACflB,QA1FYqD,KACxB,IAAIT,EAAUvC,EAAKiD,MAAM,QACzBhD,EAAQsC,EAAQW,KAAK,MACrBlE,EAAM8C,UAAU,wBAAyB,YAuFF1C,SAC5B,gCAOPH,cAAA,UAAQC,UAAU,4BAA4BS,QArI7BwD,KACjBhD,EARAE,IACFA,EAAY+C,OACZhD,GAAe,GACfpB,EAAM8C,UAAU,sBAAuB,SA1CpBuB,MACrB,GAAI,4BAA6BC,QAAU,sBAAuBA,OAAQ,CAGxE,IAAIC,EAAsB,IADxBD,OAAOE,mBAAqBF,OAAOG,yBAErCF,EAAoBG,KAAO,QAC3BH,EAAoBI,YAAa,EACjCJ,EAAoBK,gBAAiB,EAErCL,EAAoBM,QAAU,KAC5B7E,EAAM8C,UAAU,eAAgB,SAGlCyB,EAAoBO,YAAc,KAChC9E,EAAM8C,UAAU,gBAAiB,SAInCyB,EAAoBQ,SAAWxD,EAE/BgD,EAAoBS,QAAWxD,IAC7BxB,EAAM8C,UACJ,6CAA+CtB,EAAMyD,MACrD,WAIJV,EAAoBW,QACpB5D,EAAeiD,GACfnD,GAAe,QAEfpB,EAAM8C,UACJ,oDACA,WAiBFuB,IAiIwEjE,SACnEe,EAAc,kBAAoB,mBAErClB,cAAA,UACEoD,SAA0B,IAAhBrC,EAAKa,OACf3B,UAAU,4BACVS,QAlGYwE,KAClB,IAAIC,EAAY,IAAIC,yBAAyBrE,GAC7CsD,OAAOgB,gBAAgBC,MAAMH,GAC7BpF,EAAM8C,UAAU,iBAAkB,YA+FP1C,SACtB,eAGDH,cAAA,UACEoD,SAA0B,IAAhBrC,EAAKa,OACf3B,UAAU,4BACVS,QAnGmB6E,KACzBlB,OAAOgB,gBAAgBG,SACvBzF,EAAM8C,UAAU,oBAAqB,YAiGH1C,SAC7B,qBAIHC,eAAA,OACEH,UAAU,iBACVW,MAAO,CAAEC,MAAsB,SAAfd,EAAMG,KAAkB,QAAU,WAAYC,SAAA,CAE9DH,cAAA,MAAAG,SAAI,sBACJC,eAAA,KAAAD,SAAA,CAEIY,EAAKiD,MAAM,OAAOyB,QAAQC,GACE,IAAnBA,EAAQ9D,SACdA,OACH,IAAI,aACKb,EAAKa,OAAO,iBAEzBxB,eAAA,KAAAD,SAAA,CACG,KACCY,EAAKiD,MAAM,OAAOyB,QAAQC,GACE,IAAnBA,EAAQ9D,SACdA,OAAQ,IAAI,kBAGnB5B,cAAA,MAAAG,SAAI,YACJH,cAAA,KAAAG,SAAIY,EAAKa,OAAS,EAAIb,EAAO,8BDjLrCjB,EAAO6F,aAAe,CACpBrF,MAAO,iBACPsF,UAAW,SEnEEC,MAnBf,SAAe9F,GAKb,OACEC,cAAA,OAAKY,MAAO,CAAEkF,OAAQ,QAAS3F,SAC5BJ,EAAMgG,OACL3F,eAAA,OACEH,UAAW,eAAeF,EAAMgG,MAAMxF,mCACtCyF,KAAK,QAAO7F,SAAA,CAEZH,cAAA,UAAAG,SAXY8F,KAClB,MAAMC,EAAQD,EAAKxC,cACnB,OAAOyC,EAAMC,OAAO,GAAG5C,cAAgB2C,EAAME,MAAM,IASpCC,CAAWtG,EAAMgG,MAAMxF,QAAe,KAAGR,EAAMgG,MAAMO,UCkDzDC,MAxDf,WACE,MAAOrG,EAAMsG,GAAWvF,mBAAS,UAC1B8E,EAAOU,GAAYxF,mBAAS,MAE7B4B,EAAYA,CAAC6D,EAASnG,KAC1BkG,EAAS,CACPH,IAAKI,EACLnG,KAAMA,IAERoG,YAAW,KACTF,EAAS,QACR,OAcL,OACErG,eAAA0C,WAAA,CAAA3C,SAAA,CAEEH,cAACF,EAAM,CACLQ,MAAM,YACNJ,KAAMA,EACNS,WAjBaA,KACJ,UAATT,GACFsG,EAAQ,QACRI,SAASC,KAAKjG,MAAMsC,gBAAkB,UACtCL,EAAU,6BAA8B,aAExC2D,EAAQ,SACRI,SAASC,KAAKjG,MAAMsC,gBAAkB,iBACtCL,EAAU,8BAA+B,cAUlC,IAAIiE,MAEX9G,cAAC6F,EAAK,CAACE,MAAOA,IACd/F,cAAA,OAAKC,UAAU,iBAAgBE,SAQ7BH,cAACc,EAAQ,CACP+B,UAAWA,EACXE,QAAQ,kDACR7C,KAAMA,UC1CD6G,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,OCDdS,IAASC,OACP1H,cAAC2H,IAAMC,WAAU,CAAAzH,SACfH,cAACuG,EAAG,MAENK,SAASiB,eAAe,SAM1Bd,M","file":"static/js/main.7c98e243.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`my-nav navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"/\">\n          {props.title}\n        </a>\n        {/* <Link className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link> */}\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" aria-current=\"page\" href=\"/\">\n                Home\n              </a>\n              {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link> */}\n            </li>\n            {/* <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                {props.aboutText}\n              </Link>\n            </li> */}\n          </ul>\n          <div className=\"d-flex align-items-center\">\n            <div\n              className={`form-check form-switch text-${\n                props.mode === \"light\" ? \"dark\" : \"light\"\n              }`}\n            >\n              {/* <input\n                className=\"form-check-input\"\n                onClick={props.toggleMode}\n                type=\"checkbox\"\n                id=\"flexSwitchCheckDefault\"\n              /> */}\n              <label\n                className=\"form-check-label\"\n                htmlFor=\"flexSwitchCheckDefault\"\n              ></label>\n            </div>\n            <button\n              className=\"btn btn-link text-decoration-none ms-2\"\n              onClick={props.toggleMode}\n            >\n              <i\n                className={`fas fa-${\n                  props.mode === \"light\" ? \"moon\" : \"sun\"\n                } fa-lg`}\n                style={{ color: props.mode === \"light\" ? \"black\" : \"yellow\" }}\n              ></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n  mode: PropTypes.string.isRequired,\n  toggleMode: PropTypes.func.isRequired,\n};\n\nNavbar.defaultProps = {\n  title: \"Set title here\",\n  aboutText: \"About\",\n};\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const defaultText = \"Enter your text here...\"; // Add your default text here\n\n  const [text, setText] = useState(defaultText);\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n\n  // Handle the speech recognition result and replace spoken punctuation with symbols\n  const handleResult = (event) => {\n    let interimTranscript = \"\";\n\n    // Loop through all the results and append them to interimTranscript\n    for (let i = event.resultIndex; i < event.results.length; ++i) {\n      interimTranscript += event.results[i][0].transcript;\n    }\n\n    // Define a map of spoken words to punctuation marks\n    const punctuationMap = {\n      period: \".\",\n      comma: \",\",\n      \"exclamation mark\": \"!\",\n      \"question mark\": \"?\",\n      quote: '\"',\n      \"open quote\": '\"',\n      \"close quote\": '\"',\n      colon: \":\",\n      semicolon: \";\",\n      dash: \"-\",\n      \"open parenthesis\": \"(\",\n      \"close parenthesis\": \")\",\n    };\n\n    // Replace spoken words with their corresponding punctuation marks\n    for (const [key, value] of Object.entries(punctuationMap)) {\n      const regex = new RegExp(`\\\\b${key}\\\\b`, \"gi\");\n      interimTranscript = interimTranscript.replace(regex, value);\n    }\n\n    // Set the processed text to the text state\n    setText((prevText) => prevText + interimTranscript);\n    props.showAlert(\"Text added from speech!\", \"success\");\n  };\n\n  const startListening = () => {\n    if (\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window) {\n      const SpeechRecognition =\n        window.SpeechRecognition || window.webkitSpeechRecognition;\n      let recognitionInstance = new SpeechRecognition();\n      recognitionInstance.lang = \"en-US\";\n      recognitionInstance.continuous = true;\n      recognitionInstance.interimResults = false;\n\n      recognitionInstance.onstart = () => {\n        props.showAlert(\"Listening...\", \"info\");\n      };\n\n      recognitionInstance.onspeechend = () => {\n        props.showAlert(\"Speech ended.\", \"info\");\n      };\n\n      // Set the custom handleResult function as the onresult handler\n      recognitionInstance.onresult = handleResult;\n\n      recognitionInstance.onerror = (event) => {\n        props.showAlert(\n          \"Error occurred during speech recognition: \" + event.error,\n          \"danger\"\n        );\n      };\n\n      recognitionInstance.start();\n      setRecognition(recognitionInstance);\n      setIsListening(true);\n    } else {\n      props.showAlert(\n        \"Speech recognition not supported in this browser.\",\n        \"danger\"\n      );\n    }\n  };\n\n  const stopListening = () => {\n    if (recognition) {\n      recognition.stop();\n      setIsListening(false);\n      props.showAlert(\"Microphone stopped.\", \"info\");\n    }\n  };\n\n  const handleMicClick = () => {\n    if (isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  };\n\n  const handleUpClick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to uppercase!\", \"success\");\n  };\n\n  const handleLoClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to lowercase!\", \"success\");\n  };\n\n  const handleClearClick = () => {\n    let newText = \"\";\n    setText(newText);\n    props.showAlert(\"Text Cleared!\", \"success\");\n  };\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(text);\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\n  };\n\n  const handleExtraSpaces = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"Extra spaces removed!\", \"success\");\n  };\n\n  const handleSpeak = () => {\n    let utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n    props.showAlert(\"Speaking text!\", \"success\");\n  };\n\n  const handleStopSpeaking = () => {\n    window.speechSynthesis.cancel();\n    props.showAlert(\"Stopped speaking!\", \"success\");\n  };\n\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h1 className=\"mb-4\">{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control w-5\"\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\n            }}\n            id=\"myBox\"\n            rows=\"6\"\n          ></textarea>\n        </div>\n\n        {/* Dropdown for text editing options */}\n        <div className=\"dropdown\">\n          <button\n            className=\"btn btn-primary dropdown-toggle\"\n            type=\"button\"\n            id=\"dropdownMenuButton\"\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            Text Editing Options\n          </button>\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n            <li>\n              <button\n                className=\"dropdown-item\"\n                disabled={text.length === 0}\n                onClick={handleUpClick}\n              >\n                Convert to Uppercase\n              </button>\n            </li>\n            <li>\n              <button\n                className=\"dropdown-item\"\n                disabled={text.length === 0}\n                onClick={handleLoClick}\n              >\n                Convert to Lowercase\n              </button>\n            </li>\n            <li>\n              <button\n                className=\"dropdown-item\"\n                disabled={text.length === 0}\n                onClick={handleClearClick}\n              >\n                Clear Text\n              </button>\n            </li>\n            <li>\n              <button\n                className=\"dropdown-item\"\n                disabled={text.length === 0}\n                onClick={handleCopy}\n              >\n                Copy Text\n              </button>\n            </li>\n            <li>\n              <button\n                className=\"dropdown-item\"\n                disabled={text.length === 0}\n                onClick={handleExtraSpaces}\n              >\n                Remove Extra Spaces\n              </button>\n            </li>\n          </ul>\n        </div>\n\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handleMicClick}>\n          {isListening ? \"Stop Microphone\" : \"Use Microphone\"}\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleSpeak}\n        >\n          Speak Text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleStopSpeaking}\n        >\n          Stop Speaking\n        </button>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h2>Your text summary</h2>\n        <p>\n          {\n            text.split(/\\s+/).filter((element) => {\n              return element.length !== 0;\n            }).length\n          }{\" \"}\n          words and {text.length} characters\n        </p>\n        <p>\n          {0.008 *\n            text.split(/\\s+/).filter((element) => {\n              return element.length !== 0;\n            }).length}{\" \"}\n          Minutes read\n        </p>\n        <h2>Preview</h2>\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nfunction Alert(props) {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  };\n  return (\n    <div style={{ height: \"50px\" }}>\n      {props.alert && (\n        <div\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n          role=\"alert\"\n        >\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Alert;\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"blanchedalmond\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"TextUtils\"\n        mode={mode}\n        toggleMode={toggleMode}\n        key={new Date()}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n        {/* /users --> Component 1\n        /users/home --> Component 2 */}\n        {/* <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter text and edit using the following options\"\n          mode={mode}\n        />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}